require('dotenv').config();
const express = require('express');
const cors = require('cors');
const winston = require('winston');
const fs = require('fs');
const path = require('path');
const YAML = require('yaml');
const swaggerUi = require('swagger-ui-express');
const specsRouter = require('./routes/specs');
const uiRouter = require('./routes/ui');
const authRouter = require('./routes/auth');
const servicesRouter = require('./routes/services');
const initGitRepo = require('./utils/gitInit');
const { errors } = require('./lib/shared-libraries');

const app = express();
const PORT = process.env.PORT || 3005;

// Ensure storage directories exist
const STORAGE_DIR = path.join(__dirname, '../storage');
const SPECS_DIR = path.join(STORAGE_DIR, 'specs');
const SERVICES_DIR = path.join(STORAGE_DIR, 'services');

if (!fs.existsSync(STORAGE_DIR)) {
  fs.mkdirSync(STORAGE_DIR, { recursive: true });
}
if (!fs.existsSync(SPECS_DIR)) {
  fs.mkdirSync(SPECS_DIR, { recursive: true });
}
if (!fs.existsSync(SERVICES_DIR)) {
  fs.mkdirSync(SERVICES_DIR, { recursive: true });
}

// Ensure logs directory exists
const LOGS_DIR = path.join(__dirname, '../logs');
if (!fs.existsSync(LOGS_DIR)) {
  fs.mkdirSync(LOGS_DIR, { recursive: true });
}

app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging setup
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/api-registry.log' })
  ]
});

// Request logging middleware
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.url}`, { 
    ip: req.ip,
    userAgent: req.get('User-Agent')
  });
  next();
});

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, '../public')));

// API routes
app.use('/specs', specsRouter);
app.use('/services', servicesRouter);
app.use('/auth', authRouter);

// Serve UI for browsing APIs
app.use('/ui', uiRouter);

// Root route - redirect to UI
app.get('/', (req, res) => {
  res.redirect('/ui');
});

// Serve Swagger UI for the API Registry's own API
const openApiPath = path.join(__dirname, 'openapi.yaml');
if (fs.existsSync(openApiPath)) {
  const openApiSpec = YAML.parse(fs.readFileSync(openApiPath, 'utf8'));
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(openApiSpec, {
    customSiteTitle: 'API Registry Documentation'
  }));
} else {
  logger.warn('OpenAPI specification not found at:', openApiPath);
}

// DID document endpoint (well-known location)
app.get('/.well-known/did.json', async (req, res) => {
  try {
    const { did } = require('./lib/shared-libraries');
    
    const didDocument = did.document.generate({
      id: process.env.SERVICE_DID || 'did:web:api-registry',
      service: 'api-registry',
      baseUrl: process.env.BASE_URL || `http://localhost:${PORT}`
    });
    
    res.json(didDocument);
  } catch (error) {
    logger.error('DID document generation error:', error);
    res.status(500).json(
      errors.format('did/generation-error', 'Failed to generate DID document')
    );
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok',
    service: 'api-registry',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    features: {
      apiKeyAuth: true,
      didAuth: process.env.ENABLE_DID_AUTH === 'true',
      gitStorage: process.env.GIT_ENABLED === 'true'
    }
  });
});

// 404 handler
app.use((req, res, next) => {
  res.status(404).json(
    errors.format('resource/not-found', `Resource not found: ${req.path}`)
  );
});

// Error handling middleware
app.use((error, req, res, next) => {
  logger.error('Unhandled error:', error);
  res.status(500).json(
    errors.format('internal/server-error', 'An internal server error occurred')
  );
});

// Start the server
app.listen(PORT, async () => {
  try {
    // Initialize git repository for specs storage if enabled
    if (process.env.GIT_ENABLED === 'true') {
      await initGitRepo();
      logger.info('Git repository initialized successfully');
    }
    
    logger.info(`API Registry service running on port ${PORT}`);
    logger.info(`API documentation available at http://localhost:${PORT}/api-docs`);
    logger.info(`API browser UI available at http://localhost:${PORT}/ui`);
  } catch (error) {
    logger.error('Error during server startup:', error);
  }
});
  
  logger.info(`API Registry Service running on port ${PORT}`, {
    port: PORT,
    didAuth: process.env.ENABLE_DID_AUTH === 'true',
    gitEnabled: process.env.GIT_ENABLED === 'true'
  });
});
